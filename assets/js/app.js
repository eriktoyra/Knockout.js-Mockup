// Generated by CoffeeScript 1.3.3

/*
	Beer (a.k.a ActionPlan ;)
*/


(function() {
  var Beer, BeerListViewModel,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Beer = (function() {

    function Beer(name, style, rating) {
      this.name = name;
      this.style = style;
      this.rating = rating;
      this.name = ko.observable(this.name);
      this.style = ko.observable(this.style);
      this.rating = ko.observable(this.rating);
    }

    return Beer;

  })();

  /*
  	BeerListViewModel (a.k.a. ActionPlanList ;)
  */


  BeerListViewModel = (function() {

    function BeerListViewModel() {
      this.removeBeerReview = __bind(this.removeBeerReview, this);

      this.addBeerReview = __bind(this.addBeerReview, this);

      this.resetCustomReviewForm = __bind(this.resetCustomReviewForm, this);

      var _this = this;
      this.customBeerReviewName = ko.observable();
      this.customBeerReviewStyle = ko.observable();
      this.customBeerReviewRating = ko.observable();
      this.beers = ko.observableArray([new Beer('Adam From the Wood', 'Old Ale', 4.4), new Beer('Bedarö Bitter', 'English Bitter', 3.9), new Beer('Pliny The Elder', 'American Barlewine', 5.0), new Beer('Pripps Blå', 'Euro Lager', 1.8)]);
      this.highestRatedBeer = ko.computed(function() {
        var beer, highestRatedBeer, _fn, _i, _len, _ref;
        highestRatedBeer = _this.beers()[0];
        _ref = _this.beers();
        _fn = function(beer) {
          if (parseFloat(beer.rating()) > parseFloat(highestRatedBeer.rating())) {
            return highestRatedBeer = beer;
          }
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          beer = _ref[_i];
          _fn(beer);
        }
        return highestRatedBeer;
      });
      this.averageRating = ko.computed(function() {
        var averageRating, beer, _fn, _i, _len, _ref;
        averageRating = 0;
        _ref = _this.beers();
        _fn = function(beer) {
          return averageRating += parseFloat(beer.rating());
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          beer = _ref[_i];
          _fn(beer);
        }
        return (averageRating / _this.beers().length).toFixed(2);
      });
    }

    BeerListViewModel.prototype.resetCustomReviewForm = function() {
      this.customBeerReviewName('');
      this.customBeerReviewStyle('');
      return this.customBeerReviewRating('');
    };

    BeerListViewModel.prototype.addBeerReview = function() {
      if (this.customBeerReviewName() != null) {
        this.beers.push(new Beer(this.customBeerReviewName(), this.customBeerReviewStyle(), this.customBeerReviewRating()));
      }
      return this.resetCustomReview;
    };

    BeerListViewModel.prototype.removeBeerReview = function(beer) {
      return this.beers.splice(this.beers().indexOf(beer), 1);
    };

    return BeerListViewModel;

  })();

  ko.applyBindings(new BeerListViewModel());

}).call(this);
